//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
    fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
    fileprivate static let hostingBundle = Bundle(for: R.Class.self)

    static func validate() throws {
        try intern.validate()
    }

    /// This `R.file` struct is generated, and contains static references to 2 files.
    struct file {
        /// Resource file `448-ripple-loading-animation.json`.
        static let rippleLoadingAnimationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "448-ripple-loading-animation", pathExtension: "json")
        /// Resource file `Settings.bundle`.
        static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")

        /// `bundle.url(forResource: "448-ripple-loading-animation", withExtension: "json")`
        static func rippleLoadingAnimationJson(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.rippleLoadingAnimationJson
            return fileResource.bundle.url(forResource: fileResource)
        }

        /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
        static func settingsBundle(_: Void = ()) -> Foundation.URL? {
            let fileResource = R.file.settingsBundle
            return fileResource.bundle.url(forResource: fileResource)
        }

        fileprivate init() {}
    }

    /// This `R.image` struct is generated, and contains static references to 1 images.
    struct image {
        /// Image `setting`.
        static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")

        /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
        static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
        }

        fileprivate init() {}
    }

    /// This `R.nib` struct is generated, and contains static references to 5 nibs.
    struct nib {
        /// Nib `ConnectViewController`.
        static let connectViewController = _R.nib._ConnectViewController()
        /// Nib `ControlViewController`.
        static let controlViewController = _R.nib._ControlViewController()
        /// Nib `InformationViewController`.
        static let informationViewController = _R.nib._InformationViewController()
        /// Nib `SettingViewController`.
        static let settingViewController = _R.nib._SettingViewController()
        /// Nib `WebViewController`.
        static let webViewController = _R.nib._WebViewController()

        /// `UINib(name: "ConnectViewController", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.connectViewController) instead")
        static func connectViewController(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.connectViewController)
        }

        /// `UINib(name: "ControlViewController", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.controlViewController) instead")
        static func controlViewController(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.controlViewController)
        }

        /// `UINib(name: "InformationViewController", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.informationViewController) instead")
        static func informationViewController(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.informationViewController)
        }

        /// `UINib(name: "SettingViewController", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.settingViewController) instead")
        static func settingViewController(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.settingViewController)
        }

        /// `UINib(name: "WebViewController", in: bundle)`
        @available(*, deprecated, message: "Use UINib(resource: R.nib.webViewController) instead")
        static func webViewController(_: Void = ()) -> UIKit.UINib {
            return UIKit.UINib(resource: R.nib.webViewController)
        }

        static func connectViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.connectViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        static func controlViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.controlViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        static func informationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.informationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        static func settingViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.settingViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        static func webViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
            return R.nib.webViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
        }

        fileprivate init() {}
    }

    /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
    struct storyboard {
        /// Storyboard `LaunchScreen`.
        static let launchScreen = _R.storyboard.launchScreen()
        /// Storyboard `Main`.
        static let main = _R.storyboard.main()

        /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
        static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
        }

        /// `UIStoryboard(name: "Main", bundle: ...)`
        static func main(_: Void = ()) -> UIKit.UIStoryboard {
            return UIKit.UIStoryboard(resource: R.storyboard.main)
        }

        fileprivate init() {}
    }

    /// This `R.string` struct is generated, and contains static references to 3 localization tables.
    struct string {
        /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
        struct launchScreen {
            fileprivate init() {}
        }

        /// This `R.string.localizeString` struct is generated, and contains static references to 1 localization keys.
        struct localizeString {
            /// en translation: hoge
            ///
            /// Locales: en, ja
            static let hogE = Rswift.StringResource(key: "HOGE", tableName: "Localize.string", bundle: R.hostingBundle, locales: ["en", "ja"], comment: nil)

            /// en translation: hoge
            ///
            /// Locales: en, ja
            static func hogE(_: Void = ()) -> String {
                return NSLocalizedString("HOGE", tableName: "Localize.string", bundle: R.hostingBundle, comment: "")
            }

            fileprivate init() {}
        }

        /// This `R.string.main` struct is generated, and contains static references to 0 localization keys.
        struct main {
            fileprivate init() {}
        }

        fileprivate init() {}
    }

    fileprivate struct intern: Rswift.Validatable {
        fileprivate static func validate() throws {
            try _R.validate()
        }

        fileprivate init() {}
    }

    fileprivate class Class {}

    fileprivate init() {}
}

struct _R: Rswift.Validatable {
    static func validate() throws {
        try storyboard.validate()
    }

    struct nib {
        struct _ConnectViewController: Rswift.NibResourceType {
            let bundle = R.hostingBundle
            let name = "ConnectViewController"

            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
            }

            fileprivate init() {}
        }

        struct _ControlViewController: Rswift.NibResourceType {
            let bundle = R.hostingBundle
            let name = "ControlViewController"

            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
            }

            fileprivate init() {}
        }

        struct _InformationViewController: Rswift.NibResourceType {
            let bundle = R.hostingBundle
            let name = "InformationViewController"

            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
            }

            fileprivate init() {}
        }

        struct _SettingViewController: Rswift.NibResourceType {
            let bundle = R.hostingBundle
            let name = "SettingViewController"

            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
            }

            fileprivate init() {}
        }

        struct _WebViewController: Rswift.NibResourceType {
            let bundle = R.hostingBundle
            let name = "WebViewController"

            func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey: Any]? = nil) -> UIKit.UIView? {
                return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
            }

            fileprivate init() {}
        }

        fileprivate init() {}
    }

    struct storyboard: Rswift.Validatable {
        static func validate() throws {
            try launchScreen.validate()
            try main.validate()
        }

        struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
            typealias InitialController = UIKit.UIViewController

            let bundle = R.hostingBundle
            let name = "LaunchScreen"

            static func validate() throws {
                if #available(iOS 11.0, *) {}
            }

            fileprivate init() {}
        }

        struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
            typealias InitialController = UIKit.UIViewController

            let bundle = R.hostingBundle
            let name = "Main"

            static func validate() throws {
                if #available(iOS 11.0, *) {}
            }

            fileprivate init() {}
        }

        fileprivate init() {}
    }

    fileprivate init() {}
}
